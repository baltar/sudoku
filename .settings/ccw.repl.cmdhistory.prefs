cmdhistory=["(shuffle (range 10))" "\\n(shuffle (range 10))" "'()" "(seq? '())" "(seq? nil)" "(next '())" "(seq? seq '())" "(seq? (seq '()))" "(seq '())" "(if seq '() \:true \:false)" "(if (seq '()) \:true \:false)" "(if (seq '(\:1)) \:true \:false)" "(doc conj)" "(if nil \:true \:false)" "(length '(\\"a\\" \\"b\\"))" "(size '(\\"a\\" \\"b\\"))" "(count '(\\"a\\" \\"b\\"))" "(seq '(\\"a\\" \\"b\\"))" "(seq '())" "(in-ns test)" "(in-ns 'test)\\n\#" "(in-ns 'test)" "(construct-seq-backtracking \#(\:a))" "(construct-seq-backtracking 2 \#(\:a))" "(construct-seq-backtracking 2 \#(1))" "(\#(1))" "(\#(+ 1 0))" "(doc constantly )" "(construct-seq-backtracking 2 (constantly 1))" "(construct-seq-backtracking 3 (constantly 1))" "(if-let [a (first nil)] true false)" "(if-let [a (first '())] true false)" "(if-let [a (first '(\:1))] true false)" "(rest '())" "(rest '(\:a))" "(if-let (rest '(\:a)) true false)" "(if-let [a (rest '(\:a))] true false)" "(if-let [a (first '(\:a))] true false)" "(if-let [b true a (first '(\:a))] true false)" "(if-let [a '()] true false)" "(if-let [a nil] true false)" "(if-let [a (first '(\:a))] true false)" "(if-let [a (first '())] true false)" "(if-let [a (rest '())] true false)" "(if-let [a (first '())] true false)" "(seq nil)" "(conj '(\:a) \:b)" "(first (conj '(\:a) \:b))" "(first (conj [\:a] \:b))" "(construct-seq-backtracking 2 (constantly 2))" "monitor-exit" "(construct-seq-backtracking 2 (constantly 2))" "(+ 1 0)" "(construct-seq-backtracking 2 (fn [] 2))" "(construct-seq-backtracking 2 (fn [s] 2))" "(construct-seq-backtracking 2 (fn [s] [2]))" "(construct-seq-backtracking 2 (fn [s] [2 3]))" "(construct-seq-backtracking 2 (fn [s] [nil 2 3]))" "(construct-seq-backtracking 3 (fn [s] [nil 2 3]))" "(construct-seq-backtracking 3 (fn [s] [2 nil 3]))" "(construct-seq-backtracking 3 (fn [s] (if (zero? (last s) 1 0))))" "(construct-seq-backtracking 3 (fn [s] (if (zero? (last s)) 1 0)))" "(construct-seq-backtracking 3 (fn [s] (if (and (seq s) (zero? (last s)) 1 0))))" "(construct-seq-backtracking 3 (fn [s] (if (and (seq s) (zero? (last s))) 1 0)))" "(construct-seq-backtracking 3 (fn [s] (if (seq s)) (+ (last s) 1 0)))" "(construct-seq-backtracking 3 (fn [s] (if (seq s) (+ (last s) 1 0))))" "(construct-seq-backtracking 3 (fn [s] (if (seq s) (+ (last s) [1] [0]))))" "(construct-seq-backtracking 2 (fn [] 2))" "((fn [s] (if (seq s) (+ (last s) [1] [0]))) '(1))" "(last '(1))" "((fn [s] (if (seq s) [(+ (last s) 1)] [0])) '(1))" "((fn [s] (if (seq s) [(+ (last s) 1)] [0])) '(0))" "((fn [s] (if (seq s) [(+ (last s) 1)] [0])) '(0 1))" "(construct-seq-backtracking 2 (fn [s] (if (seq s) [(+ (last s) 1)] [0])))" "(construct-seq-backtracking52 (fn [s] (if (seq s) [(+ (last s) 1)] [0])))" "(construct-seq-backtracking 5 (fn [s] (if (seq s) [(+ (last s) 1)] [0])))" "(construct-seq-backtracking 5 (fn [s] (if (seq s) [(+ (first s) 1)] [0])))" "(construct-seq-backtracking 5 no-three)" "(\=\= 3 '(3 2 1))" "(\=\= 3 (first '(3 2 1)))" "(if-let [f (first '())] true false)" "(if-let [f (first '(1))] true false)" "(construct-seq-backtracking 5 no-three)" "(no-three '(3 2 1))" "(no-three '(2))" "(no-three '())" "(no-three nil)" "(construct-seq-backtracking 5 no-three)" "(butlast constructed)" "dsadsa" "asd" "odd?" "(in-ns test)" ";; Switching to test namespace" "(in-ns 'test)" "(construct-seq-backtracking 5 no-three)" "map-indexed" "(construct-seq-backtracking 5 no-three)" "(doc mod)" "(mod 5 9)" "(mod 13 9)" "(mod 9 9)" "(mod 1 9)" "(mod 0 9)" "(/ 5 9)" ";; Switching to test namespace" "(in-ns 'test)" "(/ 3 9)" "(int (/ 3 9))" "(int (/ 9 9))" "(int (/ 20 9))" "[(get-x 15) (get-y 15)]" "[(get-x 15 9) (get-y 15 9)]" "[(get-x 15 9) (get-y 16 9)]" "[(get-x 16 9) (get-y 16 9)]" "(doc partition-by)" "(doc partition)" "(partition 2 (range 10))" "(in-ns 'net.blankenburg.sudoku2)" "(partition 2 (range 10))" "(defrecord test [a])" "(defrecord test [\:a])" "(defrecord test [v1])" "(defrecord test [v1] nil\\n  )" "(doc defrecord)" "(defrecord test [v1] nil\\n  )" "(defrecord testr [v1])" "(testr. 1)" "(\:v1 (testr. 1))" "(board. [3 3 3 3])" "(Board. [3 3 3 3])" "(doc Board)" "(source Board)" "(source get-x)" "(Board. [3 3 3 3])" "(Board. 3 3 3 3)" "(get-width (Board. 3 3 3 3))" "(BoardProperties. 3 3 3 3)" "(in-ns 'net.blankenburg.sudoku2)" "(BoardProperties. 3 3 3 3)" "(def get-quadrant-x (memoize (fn [k width quadrant-height] (int (/ (get-x k width) quadrant-height)))))\\n" "(get-quadrant-x 5 9 3)" "(get-quadrant-x 16 9 3)" "(get-quadrant-x 0 9 3)" "(get-quadrant-x 9 9 3)" "(get-quadrant-x 18 9 3)" "(get-quadrant-x 12 9 3)" "(get-quadrant-x 14 9 3)" "(get-quadrant-x 14 9 5)" "(get-quadrant-x 14 10 5)" "(get-quadrant-x 15 10 5)" "(get-quadrant-x 19 10 5)" "(get-quadrant-x 20 10 5)" "(get-quadrant-x 19 10 5)" "(doc def-)" "'(2)" "(source defn-)" "'(1)" ";; Switching to net.blankenburg.sudoku2 namespace" "(source defn-)" "(source def)" "(doc with-meta)" "(macroexpand-1 (def- testp (fn [] 1)))" "(macroexpand (def- testp (fn [] 1)))" "(macroexpand-1 '(def- testp (fn [] 1)))" "(macroexpand '(def- testp (fn [] 1)))" "(macroexpand-1 '(def- testp (fn [] 1)))" "(defmacro def- \\"Same as def but non-public\\" \\r\\n  [name decl] (`def ^{\:private false} name decl))" "(macroexpand-1 '(def- testp (fn [] 1)))" "(def- a 1)" "a" "(def a 1)" "a" "(def- b 1)" "b" "(source when)" "(def- b 1)" "b" "(def- b 1)" "b" "(in-ns 'user)" "'net.blankenburg.sudoku2/b" "(println 'net.blankenburg.sudoku2/b)" "(println 'net.blankenburg.sudoku2/c)" "('net.blankenburg.sudoku2/c)" "('net.blankenburg.sudoku2/b)" "'net.blankenburg.sudoku2/b" "'net.blankenburg.sudoku2/BoardPropertiesProtocol" "'net.blankenburg.sudoku2/D" "net.blankenburg.sudoku2/D" "net.blankenburg.sudoku2/a" "net.blankenburg.sudoku2/b" "(in-ns 'net.blankenburg.sudoku2)" "(def- c 5)" "c" "(in-ns 'user)" "net.blankenburg.sudoku2/c" "(source defn-)" "(show list*)" "(doc list*)" ";; Switching to net.blankenburg.sudoku2 namespace" "(*-mem 1 2)" "(*-mem 4 2)" "(map \#([(get-quadrant-x-mem % 9 3) (get-quadrant-y-mem % 9 3)]) (range 1 82))" "(for [k (range 1 82)] [(get-quadrant-x-mem % 9 3) (get-quadrant-y-mem % 9 3)])" "(for [k (range 1 82)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)])" "(partition 9 (for [k (range 1 82)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)]))" "(map println (partition 9 (for [k (range 1 82)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)])))" "(map println (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)])))" "(partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)]))" "(println '(1 2))" "(map println '(1 2))" "(map \#(println str %) '(1 2))" "(map \#(println (str %)) '(1 2))" "(map \#(println (apply str %)) '(1 2))" "(map \#(println (apply str %)) '((1 2)))" "(map \#(println (apply str %)) (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)])))" "(partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)]))" "(for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)])" "(doseq [row (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)]))] (println row))" "(doseq [row (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 1) (get-quadrant-y-mem k 9 3)]))] (println row))" "(doseq [row (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 2) (get-quadrant-y-mem k 9 3)]))] (println row))" "(doseq [row (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 9) (get-quadrant-y-mem k 9 3)]))] (println row))" "(doseq [row (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 9) (get-quadrant-y-mem k 9 2)]))] (println row))" "(doseq [row (partition 9 (for [k (range 81)] [(get-quadrant-x-mem k 9 9) (get-quadrant-y-mem k 9 1)]))] (println row))" "(doc defrecord)" "(for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)])" "(def b1 (for [k (range 81)] [(get-quadrant-x-mem k 9 3) (get-quadrant-y-mem k 9 3)]))" "b1" "(def bp (BoardProperties 3 2 3 2))" "(def bp (BoardProperties. 3 2 3 2))" "bp" "(get-width bp)" "(get-height bp)" "(def b1 (range 24))" "b1" "(def b1 (for [k (range 24)] [(get-quadrant-x bp k) (get-quadrant-y bp k)]))" "(def b1 (range 24))" "(doseq [row (partition (get-width bp) (for [k (range 24)] [(get-quadrant-x bp k) (get-quadrant-y bp k)]))] (println row))" "(bp)" "bp" "(get-width bp)" "(def b1 (range 24))" "(def bp (BoardProperties. 3 2 3 2))" "(get-width bp)" "(doseq [row (partition (get-width bp) (for [k (range 24)] [(get-quadrant-x bp k) (get-quadrant-y bp k)]))] (println row))" "(doseq [row (partition (get-width bp) b1)] (println row))" "(get-column bp b1 0)" "(get-column bp b1 1)" "(get-column bp b1 5)" "(get-column bp b1 6)" "(get-column bp b1 4)" "(def b1 (range 24))" "(def bp (BoardProperties. 3 2 3 2))" "(get-column bp b1 4)" "(get-row bp b1 4)" "(get-row bp b1 3)" "(get-row bp b1 0)" "(get-row bp b1 1)" "(get-row bp b1 2)" "(get-quadrant bp b1 2)" "(def b1 (range 24))" "(def bp (BoardProperties. 3 2 3 2))" "(doseq [row (partition (get-width bp) b1)] (println row))" "(get-quadrant bp b1 2)" "(get-quadrant bp b1 13)" "(def b1 (range 24))" "(def bp (BoardProperties. 3 2 3 2))" "(doseq [row (partition (get-width bp) b1)] (println row))" "(get-quadrant bp b1 13)" "(get-quadrant bp b1 18)" "(get-quadrant bp b1 20)" "(get-quadrant bp b1 21)" "(def b1 (range 24))" "(def bp (BoardProperties. 3 2 3 2))" "(get-quadrant bp b1 13)" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn make-candidate-fn bp)" "(def cfn (make-candidate-fn bp))" "(cfn '(1 2))" "(nth '(1 2) 2)" "(nth '(1 2) 1)" "(count '(1 2) )" "(nth '(1 2) 1)" "(nth '(1 2) 2)" "(nth-or-nil '(1 2) 2)" "(nth-or-nil '(1 2) 1)" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(cfn '(1 2))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(cfn '(1 2))" "(mod 9 5)" "(mod 5 9)" "(mod 9 9)" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(cfn '(1 2))" "(get-row bp '(1 2) 1)" "(get-row bp '(1 2) 0)" "(get-row bp '(1 2) 3)" "(get-x bp 3)" "(get-x bp 2)" "(get-x bp 6)" "(get-x bp 12)" "(get-x bp 11)" "(partition-by-rows bp '(1 2))" "(partition-by-rows bp '(1 2 3 4 5 6))" "(partition-by-rows bp '(1 2 3 4 5 ))" "(partition-by-rows bp '(1 2 3 4 5 6 7))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(partition-by-rows bp '(1 2))" "(partition-by-rows bp '(1 2 3 4 5 6 7))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(partition-by-rows bp '(1 2))" "(partition-by-rows bp '(1 2 3 4 5 6 7))" "(get-column bp '(1 2 3 4 5 6 7) 0)" "(get-column bp '(1 2 3 4 5 6 7) 1)" "(set (get-column bp '(1 2 3 4 5 6 7) 1))" "(def bp (BoardProperties. 3 2 3 2))" "(set (get-column bp '(1 2 3 4 5 6 7) 1))" "(def bp (BoardProperties. 3 2 3 2))" "(set (get-column bp '(1 2 3 4 5 6 7) 1))" "(def bp (BoardProperties. 3 2 3 2))" "(difference \#{1 2} \#{nil})" "(difference \#{nil} \#{nil})" "\#{nil}" "(def cfn (make-candidate-fn bp))" "(cfn '(1 2))" "(cfn '(1 2 3))" "(cfn '(1 2 3 4 5 6))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(cfn '(1 2 3 4 5 6))" "(doc use)" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(cfn '(1 2 3 4 5 6))" "(construct-seq-backtracking 5 no-three)" "(run-tests)" "(doc letfn)" "(run-tests)" "(test-construct-seq-backtracking)" "test-construct-seq-backtracking" "(test-construct-seq-backtracking)" "(1 \!\= 2)" "(\!\= 1 2)" "(<> 1 2)" "(not\= 1 2)" "(test-construct-seq-backtracking)" "(run-tests)" "(def cfn (make-candidate-fn bp))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(construct-seq-backtracking 24 cfn)" "(partition-by-rows bp (construct-seq-backtracking 24 cfn))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 24 cfn))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 24 cfn))" "1" "(def bp (BoardProperties. 3 2 3 2))" "(in-ns 'net.blankenburg.sudoku2)" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 24 cfn))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'net.blankenburg.sudoku2)))" ";; Switching to net.blankenburg.sudoku2 namespace" "(def bp (BoardProperties. 3 2 3 2))" "bp" "(def bp (BoardProperties. 3 2 3 2))" "(in-ns 'net.blankenburg.sudoku2)" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 24 cfn))" "(get-row board-properties '(6 5 4 3 2 1) cells 7)" "(get-row bp '(6 5 4 3 2 1) cells 7)" "(get-row bp '(6 5 4 3 2 1)  7)" "(get-column bp '(6 5 4 3 2 1)  7)" "(get-column bp '(6 5 4 3 2 1)  6)" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 24 cfn))" "(def bp (BoardProperties. 3 2 3 2))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 24 cfn))" "(def bp (BoardProperties. 3 3 3 3))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 24 cfn))" "(print-board bp (construct-seq-backtracking 81 cfn))" "(def bp (BoardProperties. 3 3 3 3))" "(def cfn (fn [cells] (shuffle ((make-candidate-fn bp) cells))))" ";; Switching to net.blankenburg.sudoku2 namespace" "(def bp (BoardProperties. 3 3 3 3))" "(def cfn (make-shuffled-candidate-fn bp))" "(cfn '(1 2))" "(def cfn (make-shuffled-candidate-fn (make-candidate-fn bp)))" "(cfn '(1 2))" "(print-board bp (construct-seq-backtracking 81 cfn))" "(in-ns 'net.blankenburg.sudoku2)" "(def bp (BoardProperties. 3 3 3 3))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 9 cfn))" "(print-board bp (construct-seq-backtracking 10 cfn))" "(print-board bp (construct-seq-backtracking 11 cfn))" "(print-board bp (construct-seq-backtracking 18 cfn))" "(print-board bp (construct-seq-backtracking 15 cfn))" "(print-board bp (construct-seq-backtracking 16 cfn))" "(def bp (BoardProperties. 3 3 3 3))" "(def cfn (make-candidate-fn bp))" "(print-board bp (construct-seq-backtracking 11 cfn))" "(print-board bp (construct-seq-backtracking 18 cfn))" "(print-board bp (construct-seq-backtracking 15 cfn))" "(print-board bp (construct-seq-backtracking 16 cfn))" "(construct-seq-backtracking 16 cfn)" "(def bp (BoardProperties. 3 3 3 3))" "(def cfn (make-candidate-fn bp))" "(construct-seq-backtracking 16 cfn)" "(run-tests)" "(defn no-three [coll]  \\r\\n                    (if-let [last (first coll)]\\r\\n                      (when (not\= 3 last) ; if last element \!\= 3, last + 1 and last + 2 as candidates. Otherwise return nil.\\r\\n                        [(inc last) (+ last 2)]) \\r\\n                      [0]))" "(construct-seq-backtracking 2 no-three)" "(construct-seq-backtracking 3  no-three)" "(in-ns 'net.blankenburg.sudoku2)" "(run-tests)" "(last [1 2 3])" "(last [1 2 3 4])" "(run-tests)" "(map inc [1 2])" "(source map)" "(require '[clojure.core.reducers \:as r])" "(+)" "(*)" ";; Switching to sudoku-examples namespace" ";; Switching to net.blankenburg.sudoku-examples namespace" "(doc ->)" ";; Switching to net.blankenburg.sudoku-examples namespace" "(make-and-print-random-board)" ";; Switching to net.blankenburg.sudoku-examples namespace" "(nth '(1 2) 2)" "(nth '(1 2) 2 nil)" "(nth '(1 2) 3 nil)" "(contains? \#{1 2} 1)" "(contains? \#{1 2} nil)" "(contains? \#{1 2 nil} nil)" "(contains? \#{} nil)" "(in-ns 'net.blankenburg.sudoku-examples)" "board-1" "(solve STANDARD_BOARD [4 5 9 6 2 3 1 7 8 6 3 7 8 9 1 2 5 4 1 2 8 7 4 5 6 9 3 7 8 3 1 6 4 9 2])" "(with-givens (make-candidate-fn STANDARD_BOARD) [0 1 2])" "(with-givens '(0))" "(def c (with-givens (make-candidate-fn STANDARD_BOARD) [0 1 2]))" "(c '(0))" "(with-givens (make-candidate-fn STANDARD_BOARD) [0 1 2])" "(c '(0))" "(def c (with-givens (make-candidate-fn STANDARD_BOARD) [0 1 2]))" "(c '(1))" " (c '())" " (c '(9 2 3))" " (c '(1))" " (c '(1 2))" " (c '(0 1))" " (c '(1 1))" " (c '(1 2 3))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'net.blankenburg.sudoku-examples)))" "(def c (with-givens (make-candidate-fn STANDARD_BOARD) [0 1 2]))" "(c '(1 2 3))" " (c '(1 2 3 4))" "{1 1 2 2}" "(filter even? CHARACTER_SET)" "(repeat 3 nil)" "(let [evens (filter even? CHARACTER_SET)\\n        nils (repeat (count evens) nil)\\n        replacement-map (zipmap evens nils)]\\n    replace (replacement-map))" "problem-board" "(solve STANDARD_BOARD problem-board)" "(solve STANDARD_BOARD [1 2 3])" "(solve [1 2] problem-board)" "(in-ns 'net.blankenburg.sudoku)" "(solve net.blankenburg.sudoku-examples/STANDARD_BOARD '(1 2 3))" ";; Switching to net.blankenburg.sudoku-examples namespace" "(into [0 1] [2 3])" "(into [0 1] '(2 3))" ";; Switching to net.blankenburg.sudoku-examples namespace" "(in-ns 'net.blankenburg.sudoku-examples)" "(def cfn (make-candidate-fn STANDARD_BOARD))" "(defn wg (with-givens cfn problem-board))" "(def wg (with-givens cfn problem-board))" "(doc fn)" "(doc letfn)" "(defn t [a b] (* a b))" "(defn t2 [a] (t a))" "((t2 5) 3)" "(defn t2 [a] (fn [b] (t a b)))" "((t2 5) 3)" "(make-candidate-fn STANDARD_BOARD)" "((make-candidate-fn STANDARD_BOARD) '(1 2 3))" ";; Switching to net.blankenburg.sudoku-examples namespace" "((make-candidate-fn STANDARD_BOARD) '(1 2 3))" "(in-ns 'net.blankenburg.sudoku-examples)" "((make-candidate-fn STANDARD_BOARD) '(1 2 3))" "((make-candidate-fn STANDARD_BOARD) '(1 2 3 nil 5 6 7 8))" "((make-candidate-fn STANDARD_BOARD) '(1 2 3 nil 5 6 7 8) 3)" "((make-candidate-fn STANDARD_BOARD) '(1 2 3 nil 5 6 7 8) 4)" "((make-candidate-fn STANDARD_BOARD) '(1 2 3 nil 5 6 7 8) 5)" "((make-candidate-fn STANDARD_BOARD) '(1 2 nil 4 5 6 7 8 9 4 5 6) 2)" "((make-candidate-fn STANDARD_BOARD) '(1 2 nil nil 5 6 7 8 9 4 5 6) 2)" "((make-candidate-fn STANDARD_BOARD) '(1 2 nil nil 5 6 7 8 nil 4 5 6) 2)" "((with-givens (make-candidate-fn STANDARD_BOARD) '(1 2 nil nil 5 6 7 8 nil 4 5 6)) '(1 2))" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 nil nil 5 6 7 8 nil 4 5 6]) '(1 2))" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 nil nil 5 6 7 8 nil 4 5 6]) [1 2])" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 nil nil 5 6 7 8 nil 4 5 6]) '(1 2))" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) '(1 2))" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) '(1 2 3))" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) [1 2 3])" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) '(1 2 3))" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) [1 2 3])" "(in-ns 'net.blankenburg.sudoku-examples)" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) [1 2 3])" "(in-ns 'net.blankenburg.sudoku-examples)" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) [1 2 3])" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) '(1 2 3))" "(vec '(1 2 3))" "(into [1 2] [3 4 5])" "(into [1 2] '(3 4 5))" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) '(1 2 3))" "(in-ns 'net.blankenburg.sudoku-examples)" "((with-givens (make-candidate-fn STANDARD_BOARD) [1 2 3 nil 5 6 7 8 nil 4 5 6]) '(1 2 3))" ";; Switching to net.blankenburg.sudoku-examples namespace" "(doc defn)" "(eq? 1 2)" "(eq 1 2)" "(\=\= [1 2] [1 2])" "(\= [1 2] [1 2])" "(\= [1 2] '(1 2))" "(\= [1 2] '(1 2 3))" "(\= [1 2] [2 1])" "(in-ns 'net.blankenburg.sudoku-examples)" "((make-candidate-fn STANDARD_BOARD) [])" "((comp shuffle (make-candidate-fn STANDARD_BOARD)) [])" "((comp reverse (make-candidate-fn STANDARD_BOARD)) [])" "(doc nil?)" "(print \\"_|\\")" "(print _)" "(print \\\\_)" "(when '() 1 0)" "(when '(1) 1 0)" "(when (seq '(1)) 1 0)" "(when (seq '()) 1 0)" "(when (seq '()) 1)" "(when (seq '(1)) 1)" "(range 0)" "(shuffle (range 0))" "(when-let [k (first (shuffle (range 0)))] k)" "(when-let [k (first (shuffle (range 1)))] k)" "(hide-one STANDARD_BOARD problem-board)" "(in-ns 'net.blankenburg.sudoku-examples)" "(hide-one STANDARD_BOARD problem-board)" "(hide-one STANDARD_BOARD board-1)" "(print-board (hide-one STANDARD_BOARD board-1))" "(print-board STANDARD_BOARD (hide-one STANDARD_BOARD board-1))" "(when-let [a nil] a)" "(when-let [a 1] a)" "(if-let [a nil] a 3)" "(get-proper-problem STANDARD_BOARD board-1)" ";; Switching to net.blankenburg.sudoku namespace" ";; Switching to net.blankenburg.sudoku-examples namespace" "([1] 0)" "(take 5 (iterate hide-one board-2))" "(defn shide [board] (hide-one STANDARD_BOARD board))" "(defn shide [board] (shide STANDARD_BOARD board))" "(take 5 (iterate shide board-2))" "(take 5 (iterate shide board-2 board-2))" "(doc iterate)" "(take 5 (iterate shide board-2))" "(take 5 (iterate inc 1))" "(take 5 (iterate inc nil))" "(defn shide [board] (hide-one STANDARD_BOARD board))" "(take 5 (iterate shide board-2))" "(print-board (last (take 5 (iterate shide board-2))))" "(print-board STANDARD_BOARD (last (take 5 (iterate shide board-2))))" "(print-board STANDARD_BOARD (last (take 10 (iterate shide board-2))))" "(print-board STANDARD_BOARD (last (take 12 (iterate shide board-2))))" "(print-board STANDARD_BOARD (last (take 25 (iterate shide board-2))))" "(print-board STANDARD_BOARD (last (take 50 (iterate shide board-2))))" "(print-board STANDARD_BOARD (last (take 60 (iterate shide board-2))))" "(in-ns 'net.blankenburg.sudoku-examples)" ";; Switching to net.blankenburg.sudoku namespace" "(def sp (->BoardProperties (set (range 1 5)) 2 2 2 2))" "(in-ns 'net.blankenburg.sudoku-examples)" "(def sp (->BoardProperties (set (range 1 5)) 2 2 2 2))" "(def b (make-random-board sp))" "(print-board b)" "(print-board sp b)" ";; Switching to net.blankenburg.sudoku-examples namespace" "(take 5 (iterate shide b))" "(print-board sp (take 5 (iterate shide b)))" "(print-board sp (last (take 5 (iterate shide b))))" "(print-board sp (last (take 10 (iterate shide b))))" "(print-board sp (last (take 11 (iterate shide b))))" "(print-board sp (last (take 12 (iterate shide b))))" "(print-board sp (last (take 13 (iterate shide b))))" "(print-board sp (last (take 14 (iterate shide b))))" "(print-board sp (last (take 12 (iterate shide b))))" "(print-board sp (last (take 13 (iterate shide b))))" "(print-board sp (last (take 14 (iterate shide b))))" "(print-board sp (last (take 13 (iterate shide b))))" "(print-board sp (last (take 20 (iterate shide b))))" "(print-board sp (last (take 25 (iterate shide b))))" "(proper-puzzle sp b)" "(proper-puzzle sp (make-random-board sp ))" "(print-boards sp (proper-puzzle sp (make-random-board sp )))" "(print-board sp (proper-puzzle sp (make-random-board sp )))" "(def puzzle-2 (proper-puzzle STANDARD_BOARD board-2))" "(print-board (puzzle-2))" "(print-board STANDARD_BOARD puzzle-2)" ";; Switching to net.blankenburg.sudoku namespace" "(take 5 (iterate rest [1 2 3]))" "(take 5 (iterate next [1 2 3]))" "(next nil)" "(in-ns 'net.blankenburg.sudoku-examples)" "(take 1 (hide-one-more STANDARD_BOARD  board-2))" "(hide (range 81) 9)" "(in-ns 'net.blankenburg.sudoku)" "(hide (range 81) 9)" "(hide (vec (range 81)) 9)" "(hide (vec (range 81)) 0)" "(hide (vec (range 81)) 81)" "(hide (vec (range 81)) 80)" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(make-random-board bp)" "(def b (make-random-board bp))" "b" "(print-board b)" "(print-board bp b)" "(random-given bp b [])" "(zipmap b (range (count b)))" "b" "(zipmap b (range (count b)))" "(count b)" "(range (count b))" "b" "(zipmap (range (count b)) b)" "(given-positions bp b)" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(given-positions bp b)" "(filter given? bp b (range (count b)))" "(filter \#(given? bp b %) (range (count b)))" "(filter \#(given? bp (hide b 0) %) (range (count b)))" "(filter \#(given? bp (hide b 10) %) (range (count b)))" "(filter \#(given? bp (hide b 15) %) (range (count b)))" "(given-positions bp (hide b 15))" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(given-positions bp (hide b 15))" "(given-positions bp (hide (hide b 15) 10))" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(given-positions bp (hide (hide b 15) 10))" "(first nil)" "(take 1 (puzzle-seq bp b))" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(take 1 (puzzle-seq bp b))" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(take 1 (puzzle-seq bp b))" "(in-ns 'net.blankenburg.sudoku)" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(def b (make-random-board bp))" "b" "(take 1 (puzzle-seq bp b))" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(take 1 (puzzle-seq bp b))" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(take 1 (puzzle-seq bp b))" "(take 5 (puzzle-seq bp b))" "(minimal-puzzle bp b)" "(def bp (BoardProperties. (set (range 1 10) 3 3 3 3)))" "(def bp (BoardProperties. \#{1 2 3 4} 2 2 2 2))" "(def bp (BoardProperties. (set (range 1 10) 3 3 3 3)))" "(in-ns 'net.blankenburg.sudoku)" "(def bp (BoardProperties. (set (range 1 10) 3 3 3 3)))" "(def bp (BoardProperties. (set (range 1 10)) 3 3 3 3))" "(def b (make-random-board bp))" "b" "(minimal-puzzle bp b)" "(puzzle bp b 3)" "(def bp (BoardProperties. (set (range 1 10)) 3 3 3 3))" "(puzzle bp b 3)" "(puzzle bp b 0)" "(puzzle bp b 1)" "(puzzle bp b 10)" "(doc clojure.math/sin)" "(doc clojure.math/sine)" "(doc clojure.math)" ";; Switching to net.blankenburg.sudoku-examples namespace" "(map \#(hide b %) [1 2 3])" "(map \#(hide board-3 %) [1 2 3])" "(filter \#(has-unique-solution? STANDARD_BOARD %) (map \#(hide board-3 %) [1 2 3]))" "(first (filter \#(has-unique-solution? STANDARD_BOARD %) (map \#(hide board-3 %) [1 2 3])))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD %) (map \#(hide board-3 %) [1 2 3])))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD %)) (map \#(hide board-3 %) [1 2 3]))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide board-3 %))) [1 2 3])" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-2 %))) (vec (range 81)))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-2 %))) (vec (range 10 81)))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-2 %))) (vec (range 15 81)))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-3 %))) (vec (range 70 81)))" "(given-positions STANDARD_BOARD puzzle-3)" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-3 %))) (vec (range 1)))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-3 %))) [1 3 4])" "(print-board STANDARD_BOARD (take 5 (puzzle-seq-2 STANDARD_BOARD board-1 (range 81))))" "(print-board STANDARD_BOARD (first (drop 5 (puzzle-seq-2 STANDARD_BOARD board-1 (range 81)))))" "(print-board STANDARD_BOARD (first (drop 5 (puzzle-seq STANDARD_BOARD board-1 (range 81)))))" "(def c (shuffle (range 81)))" "(print-board STANDARD_BOARD (first (drop 5 (puzzle-seq STANDARD_BOARD board-1 c))))" "(print-board STANDARD_BOARD (first (drop 5 (puzzle-seq-2 STANDARD_BOARD board-1 c))))" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-3 %))) [1 3 4])" "board-3" "(given-positions board-3)" "(given-positions STANDARD_BOARD board-3)" "(drop-while \#(not (has-unique-solution? STANDARD_BOARD (hide puzzle-3 %))) [1 3 4])" "(drop-until-proper-candidate STANDARD_BOARD puzzle-3 [1 3 4])" "(given-positions STANDARD_BOARD puzzle-3)" "(drop-until-proper-candidate STANDARD_BOARD puzzle-3 [1 3 6])" "(when-let [a (drop-until-proper-candidate STANDARD_BOARD puzzle-3 [1 3 6])] a 0)" "(when-let [a (drop-until-proper-candidate STANDARD_BOARD puzzle-3 [1 3 4 6])] a 0)" "(drop-until-proper-candidate STANDARD_BOARD puzzle-3 [1 3 4 6])" "(when-let [a (range 1)] a 0)" "(when-let [a (range 1)] a \:x)" "(when-let [(seq a) (range 1)] a \:x)" "(iterate \#(drop 1 %) [1 2 3])" ";; Switching to net.blankenburg.sudoku namespace" "(drop 1 [1 2])" "(drop 1 [1])" "(drop 1 [])" "(seq (drop 1 []))" "(take-while seq (iterate \#(drop 1 %) [1 2 3]))" "(drop 1 nil)" "(take 10 (iterate seq []))" ";; Switching to net.blankenburg.sudoku namespace" "(in-ns 'net.blankenburg.sudoku)" "(def bp (BoardProperties. (set (range 1 5)) 2 2 2 2))" "(def b (make-random-board bp)\\n  )" "b" "(take 1 (puzzle-seq bp b [2 4]))" "(take 2 (puzzle-seq bp b [2 4]))" "(take 3 (puzzle-seq bp b [2 4]))" "(take 4 (puzzle-seq bp b [2 4]))" "(take 10 (puzzle-seq bp b [2 4]))" "(def bp (BoardProperties. (set (range 1 7)) 3 2 2 2))" "(def b (make-random-board bp))" "(minimal-puzzle bp b)" "(def bp (BoardProperties. (set (range 1 7)) 3 2 2 2))" "(def b (make-random-board bp))" "(minimal-puzzle bp b)" "(def bp (BoardProperties. (set (range 1 7)) 3 2 2 2))" "(def b (make-random-board bp))" "(minimal-puzzle bp b)" "(def b (make-random-board bp))" "(def bp (BoardProperties. (set (range 1 7)) 3 2 2 2))" "(def b (make-random-board bp))" "(minimal-puzzle bp b)" ";; Switching to net.blankenburg.sudoku-examples namespace" "(in-ns 'net.blankenburg.sudoku-examples)" "(print-board STANDARD_BOARD (vec (range 100 181)))" "(filter (\= 0 (/ % 3)) (range 81))" "(filter \#(\= 0 (/ % 3)) (range 81))" "(filter \#(\= 0 (mod % 3)) (range 81))" "(filter \#(\= 0 (mod % 4)) (range 81))" "(count (filter \#(\= 0 (mod % 4)) (range 81)))" "candidates" "(filter \#(\= 0 (mod % 4)) chars)" "(filter \#(\= 0 (mod % 4)) (range 81))" "candidates" "(def positions (range (get-size STANDARD_BOARD)))" "positions" "(def positions (set (range (get-size STANDARD_BOARD))))" "positions" "(minimal-puzzle STANDARD_BOARD board-3)" "(def board-3-min (minimal-puzzle STANDARD_BOARD board-3))" "board-3" "(print-board STANDARD_BOARD board-3)" "(print-board STANDARD_BOARD puzzle-3)" "(def minboard-3 (minimal-puzzle STANDARD_BOARD puzzle-3))" "(print-board STANDARD_BOARD minpuzzle-3)" "(print-board STANDARD_BOARD minboard-3)" "(count (given-positions STANDARD_BOARD minboard-3))" "(print-board STANDARD_BOARD (vec (range 100 181)))" "(print-board STANDARD_BOARD (vec (range 81)))" "(def bp (->BoardProperties (set (range 1 7)) 3 2 2 2))" "(def bp (->BoardProperties (set (range 1 7)) 2 2 3 2))" "(def b (canonical-board) bp)" "(def b (canonical-board bp))" "(doc make-random-board)" "(take 5 (seq \#{1 2 3}))" "(take 5 (seq \#{3 2 1}))" "(class \#{})" "(class \#{1 2})" "(class (set \#{1 2}))" "(class (difference \#{1 2 3} \#{2}))" "(class (difference (sorted-set \#{1 2 3}) \#{2}))" "(class (difference (apply sorted-set \#{1 2 3}) \#{2}))" "(class (difference (apply sorted-set \#{1 \:a 3}) \#{2}))" "(in-ns 'net.blankenburg.sudoku)" "(doc make-canonical-board)" "(doc make-random-board)" "(def bp (->BoardProperties (set (range 1 7)) 2 2 3 2))" "(make-canonical-board bp)" "(print-board (make-canonical-board bp))" "(print-board bp (make-canonical-board bp))" ";; Switching to net.blankenburg.sudoku namespace" "(in-ns 'net.blankenburg.sudoku-examples)" "(solve STANDARD_BOARD board-4)" "(print-board STANDARD_BOARD (solve STANDARD_BOARD board-4))" ";; Switching to net.blankenburg.sudoku-examples namespace" " board-4" " (prin STANDARD_BOARD board-4)" " (print-board STANDARD_BOARD board-4)" " (print-puzzle STANDARD_BOARD board-4)" " (print-board STANDARD_BOARD puzzle-4)" " (print-board STANDARD_BOARD (solve puzzle-4))" " (print-board STANDARD_BOARD (solve STANDARD_BOARD puzzle-4))" "puzzle-4" " (print-board STANDARD_BOARD (solve puzzle-4))" " (print-board STANDARD_BOARD puzzle-4)" " (print-board STANDARD_BOARD (solve STANDARD_BOARD puzzle-4))" ";; Switching to net.blankenburg.sudoku-examples namespace" "(set (range (get-size STANDARD_BOARD)))" "(count (set (range (get-size STANDARD_BOARD))))" "(sort (set (range (get-size STANDARD_BOARD))))" "((filter \#(\= 0 (mod % 4)) positions) (set (range (get-size STANDARD_BOARD))))" "(filter \#(\= 0 (mod % 4)) positions) (set (range (get-size STANDARD_BOARD)))" "(filter \#(\= 0 (mod % 4)) (set (range (get-size STANDARD_BOARD))))" "(doc difference)" "(letfn [(no-three [coll]  \\n                    (if-let [last (last coll)]\\n                      (when (not\= 3 last) ; if last element \!\= 3, last + 1 and last + 2 as candidates. Otherwise return nil.\\n                        [(inc last) (+ last 2)]) \\n                      [0]))]\\n  (no-three []))" "(letfn [(no-three [coll]  \\n                    (if-let [last (last coll)]\\n                      (when (not\= 3 last) ; if last element \!\= 3, last + 1 and last + 2 as candidates. Otherwise return nil.\\n                        [(inc last) (+ last 2)]) \\n                      [0]))]\\n  (no-three [0 1]))" "(letfn [(no-three [coll]  \\n                    (if-let [last (last coll)]\\n                      (when (not\= 3 last) ; if last element \!\= 3, last + 1 and last + 2 as candidates. Otherwise return nil.\\n                        [(inc last) (+ last 2)]) \\n                      [0]))]\\n  (no-three [0 1 2 3]))" "(letfn [(no-three [coll]  \\n                    (if-let [last (last coll)]\\n                      (when (not\= 3 last) ; if last element \!\= 3, last + 1 and last + 2 as candidates. Otherwise return nil.\\n                        [(inc last) (+ last 2)]) \\n                      [0]))]\\n  (no-three [0 1 2]))" "(+ 1 2)"]
eclipse.preferences.version=1
